{"paragraphs":[{"text":"%md\n### Useful stuff to clean our data","user":"anonymous","dateUpdated":"2019-02-18T21:21:42+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Useful stuff to clean our data</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1550522096007_-1260302199","id":"20190214-181155_440950642","dateCreated":"2019-02-18T20:34:56+0000","dateStarted":"2019-02-18T21:21:42+0000","dateFinished":"2019-02-18T21:21:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19740"},{"text":"import org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorAssembler, VectorIndexer}\nimport org.apache.spark.ml.regression.LinearRegression\nimport org.apache.spark.ml.evaluation.RegressionEvaluator\nimport org.apache.spark.ml.regression.IsotonicRegression\nimport org.apache.spark.ml.Pipeline\nimport org.apache.spark.sql.Encoders\nimport org.apache.spark.ml.classification.{RandomForestClassificationModel, RandomForestClassifier}\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\n\nval opera = \".*Opera.*\".r\nval safari = \".*Safari.*\".r\nval chrome = \".*Chrome.*\".r\nval firefox = \".*Firefox.*\".r\n\nval toNav = udf((ua: String) => {\n    ua match {\n      case opera() => \"Opera\"\n      case chrome() => \"Chrome\"\n      case firefox() => \"Firefox\"\n      case _ => ua\n    }\n  })","user":"anonymous","dateUpdated":"2019-02-18T21:21:42+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorAssembler, VectorIndexer}\nimport org.apache.spark.ml.regression.LinearRegression\nimport org.apache.spark.ml.evaluation.RegressionEvaluator\nimport org.apache.spark.ml.regression.IsotonicRegression\nimport org.apache.spark.ml.Pipeline\nimport org.apache.spark.sql.Encoders\nimport org.apache.spark.ml.classification.{RandomForestClassificationModel, RandomForestClassifier}\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\nopera: scala.util.matching.Regex = .*Opera.*\nsafari: scala.util.matching.Regex = .*Safari.*\nchrome: scala.util.matching.Regex = .*Chrome.*\nfirefox: scala.util.matching.Regex = .*Firefox.*\ntoNav: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,St..."}]},"apps":[],"jobName":"paragraph_1550522096010_-1594190053","id":"20190214-172543_593144153","dateCreated":"2019-02-18T20:34:56+0000","dateStarted":"2019-02-18T21:21:42+0000","dateFinished":"2019-02-18T21:22:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19741"},{"text":"case class Request(uuid: String, origin: String, ip: String, browser: String, timestamp: Long, latitude: Double, longitude: Double, price: Double)","user":"anonymous","dateUpdated":"2019-02-18T21:22:05+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class Request\n"}]},"apps":[],"jobName":"paragraph_1550522096014_1735279523","id":"20190214-173451_505192576","dateCreated":"2019-02-18T20:34:56+0000","dateStarted":"2019-02-18T21:22:05+0000","dateFinished":"2019-02-18T21:22:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19742"},{"text":"%md\nHow to force schema while reading csv:\n```scala\nval schema = Encoders.product[Request].schema\n\nval df = spark\n    .read\n    .schema(schema)\n```","user":"anonymous","dateUpdated":"2019-02-18T21:23:12+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>How to force schema while reading csv:</p>\n<pre><code class=\"scala\">val schema = Encoders.product[Request].schema\n\nval df = spark\n    .read\n    .schema(schema)\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1550522096017_-529396814","id":"20190214-181235_1149979411","dateCreated":"2019-02-18T20:34:56+0000","dateStarted":"2019-02-18T21:23:12+0000","dateFinished":"2019-02-18T21:23:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19743"},{"text":"val schema = Encoders.product[Request].schema\n\nval df = spark\n    .read\n    .option(\"header\", \"true\")\n    .schema(schema)\n    .csv(\"/zeppelin/files/dataset.csv\")\n    .select($\"uuid\", $\"origin\", $\"ip\", toNav($\"browser\") as \"browser\", $\"timestamp\", $\"latitude\", $\"longitude\", $\"price\")\n    .na.drop()","user":"anonymous","dateUpdated":"2019-02-18T21:22:06+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"schema: org.apache.spark.sql.types.StructType = StructType(StructField(uuid,StringType,true), StructField(origin,StringType,true), StructField(ip,StringType,true), StructField(browser,StringType,true), StructField(timestamp,LongType,false), StructField(latitude,DoubleType,false), StructField(longitude,DoubleType,false), StructField(price,DoubleType,false))\ndf: org.apache.spark.sql.DataFrame = [uuid: string, origin: string ... 6 more fields]\n"}]},"apps":[],"jobName":"paragraph_1550522096027_1138589977","id":"20190214-173115_626862487","dateCreated":"2019-02-18T20:34:56+0000","dateStarted":"2019-02-18T21:22:06+0000","dateFinished":"2019-02-18T21:22:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19744"},{"text":"%md\nCreate an apply a string indexer:\n\n```scala\nval encoder = new StringIndexer()\n    .setInputCol(\"names\")\n    .setOutputCol(\"nameIndex\")\n\nencoder.fit(df).transform(df)\n```\n","user":"anonymous","dateUpdated":"2019-02-18T21:22:07+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Create an apply a string indexer:</p>\n<pre><code class=\"scala\">val encoder = new StringIndexer()\n    .setInputCol(&quot;names&quot;)\n    .setOutputCol(&quot;nameIndex&quot;)\n\nencoder.fit(df).transform(df)\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1550522096030_1169660089","id":"20190214-181653_219709080","dateCreated":"2019-02-18T20:34:56+0000","dateStarted":"2019-02-18T21:22:07+0000","dateFinished":"2019-02-18T21:22:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19745"},{"text":"%md\nCreate a feature column:\n\n```scala\nval vectorAssembler = new VectorAssembler()\n    .setInputCols(Array(\"name\", \"weight\", \"age\"))\n    .setOutputCol(\"features\")\n\nvectorAssembler.transform(df)\n```","user":"anonymous","dateUpdated":"2019-02-18T21:22:07+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Create a feature column:</p>\n<pre><code class=\"scala\">val vectorAssembler = new VectorAssembler()\n    .setInputCols(Array(&quot;name&quot;, &quot;weight&quot;, &quot;age&quot;))\n    .setOutputCol(&quot;features&quot;)\n\nvectorAssembler.transform(df)\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1550522096032_1322804325","id":"20190214-181852_494601277","dateCreated":"2019-02-18T20:34:56+0000","dateStarted":"2019-02-18T21:22:07+0000","dateFinished":"2019-02-18T21:22:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19746"},{"text":"%md\nCreate and apply a model:\n\n```scala\nval lgr = new LinearRegression()\n    .setLabelCol(\"height\")\n    .setFeaturesCol(\"features\")\n\nlgr.fit(dfFeatures).transform(dfFeatures)\n```","user":"anonymous","dateUpdated":"2019-02-18T21:22:08+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Create and apply a model:</p>\n<pre><code class=\"scala\">val lgr = new LinearRegression()\n    .setLabelCol(&quot;height&quot;)\n    .setFeaturesCol(&quot;features&quot;)\n\nlgr.fit(dfFeatures).transform(dfFeatures)\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1550522096035_-2063261528","id":"20190214-182314_1151867419","dateCreated":"2019-02-18T20:34:56+0000","dateStarted":"2019-02-18T21:22:08+0000","dateFinished":"2019-02-18T21:22:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19747"},{"text":"%md\nEvaluate regression:\n\n```scala\nval rev = new RegressionEvaluator()\n    .setLabelCol(\"height\")\n    .setPredictionCol(\"prediction\")\n\nrev.evaluate(predf)\n```","user":"anonymous","dateUpdated":"2019-02-18T21:22:08+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Evaluate regression:</p>\n<pre><code class=\"scala\">val rev = new RegressionEvaluator()\n    .setLabelCol(&quot;height&quot;)\n    .setPredictionCol(&quot;prediction&quot;)\n\nrev.evaluate(predf)\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1550523292509_231093571","id":"20190218-205452_1481216756","dateCreated":"2019-02-18T20:54:52+0000","dateStarted":"2019-02-18T21:22:08+0000","dateFinished":"2019-02-18T21:22:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19748"},{"text":"%md\nCreate a Pipeline:\n\n```scala\nval pipeline = new Pipeline()\n    .setStages(Array(encoder, vectorAssembler, lgr))\n\nval model = pipeline.fit(df)\n```","user":"anonymous","dateUpdated":"2019-02-18T21:22:08+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Create a Pipeline:</p>\n<pre><code class=\"scala\">val pipeline = new Pipeline()\n    .setStages(Array(encoder, vectorAssembler, lgr))\n\nval model = pipeline.fit(df)\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1550523129773_-1130858202","id":"20190218-205209_2129588336","dateCreated":"2019-02-18T20:52:09+0000","dateStarted":"2019-02-18T21:22:08+0000","dateFinished":"2019-02-18T21:22:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19749"},{"user":"anonymous","dateUpdated":"2019-02-18T21:22:40+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1550524594730_472380093","id":"20190218-211634_930157727","dateCreated":"2019-02-18T21:16:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19750"}],"name":"Spark_ML_Exercice","id":"2E6XR48KJ","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}